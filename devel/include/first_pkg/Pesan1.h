// Generated by gencpp from file first_pkg/Pesan1.msg
// DO NOT EDIT!


#ifndef FIRST_PKG_MESSAGE_PESAN1_H
#define FIRST_PKG_MESSAGE_PESAN1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace first_pkg
{
template <class ContainerAllocator>
struct Pesan1_
{
  typedef Pesan1_<ContainerAllocator> Type;

  Pesan1_()
    : usia(0)
    , tinggi(0.0)
    , nama()
    , kehadiran(false)  {
    }
  Pesan1_(const ContainerAllocator& _alloc)
    : usia(0)
    , tinggi(0.0)
    , nama(_alloc)
    , kehadiran(false)  {
  (void)_alloc;
    }



   typedef int64_t _usia_type;
  _usia_type usia;

   typedef double _tinggi_type;
  _tinggi_type tinggi;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _nama_type;
  _nama_type nama;

   typedef uint8_t _kehadiran_type;
  _kehadiran_type kehadiran;





  typedef boost::shared_ptr< ::first_pkg::Pesan1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::first_pkg::Pesan1_<ContainerAllocator> const> ConstPtr;

}; // struct Pesan1_

typedef ::first_pkg::Pesan1_<std::allocator<void> > Pesan1;

typedef boost::shared_ptr< ::first_pkg::Pesan1 > Pesan1Ptr;
typedef boost::shared_ptr< ::first_pkg::Pesan1 const> Pesan1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::first_pkg::Pesan1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::first_pkg::Pesan1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::first_pkg::Pesan1_<ContainerAllocator1> & lhs, const ::first_pkg::Pesan1_<ContainerAllocator2> & rhs)
{
  return lhs.usia == rhs.usia &&
    lhs.tinggi == rhs.tinggi &&
    lhs.nama == rhs.nama &&
    lhs.kehadiran == rhs.kehadiran;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::first_pkg::Pesan1_<ContainerAllocator1> & lhs, const ::first_pkg::Pesan1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace first_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::first_pkg::Pesan1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::first_pkg::Pesan1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::first_pkg::Pesan1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::first_pkg::Pesan1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::first_pkg::Pesan1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::first_pkg::Pesan1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::first_pkg::Pesan1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ad8335939c8d987f5e0189e0ca2b800";
  }

  static const char* value(const ::first_pkg::Pesan1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ad8335939c8d987ULL;
  static const uint64_t static_value2 = 0xf5e0189e0ca2b800ULL;
};

template<class ContainerAllocator>
struct DataType< ::first_pkg::Pesan1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "first_pkg/Pesan1";
  }

  static const char* value(const ::first_pkg::Pesan1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::first_pkg::Pesan1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 usia\n"
"float64 tinggi\n"
"string nama\n"
"bool kehadiran\n"
;
  }

  static const char* value(const ::first_pkg::Pesan1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::first_pkg::Pesan1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.usia);
      stream.next(m.tinggi);
      stream.next(m.nama);
      stream.next(m.kehadiran);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pesan1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::first_pkg::Pesan1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::first_pkg::Pesan1_<ContainerAllocator>& v)
  {
    s << indent << "usia: ";
    Printer<int64_t>::stream(s, indent + "  ", v.usia);
    s << indent << "tinggi: ";
    Printer<double>::stream(s, indent + "  ", v.tinggi);
    s << indent << "nama: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.nama);
    s << indent << "kehadiran: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.kehadiran);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIRST_PKG_MESSAGE_PESAN1_H
